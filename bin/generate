#!/usr/bin/env bash

upper_camel () {
  node -p "let _ = require('lodash'); _.upperFirst(_.camelCase('$@'))"
}

snake () {
  node -p "let _ = require('lodash'); _.snakeCase('$@')"
}

get_sed () {
  if which gsed >/dev/null; then
    echo "gsed"
  else
    echo "sed"
  fi
}

PROJ_DIR=${PROJ_DIR:-$HOME/code/CS4500/project}
TEMPLATE_DIR=$PROJ_DIR/templates
OUTPUT_DIR=$PROJ_DIR/generated_code
# INCLUDE_HEADER_FILE=$OUTPUT_DIR/generated_code_header.h

GENERATED_CODE_WARN="// GENERATED CODE -- DO NOT MODIFY --------------------------------------------\n\n"

template=$1
name=$2
T=$3

camel_name=$(upper_camel "$name")
snake_name=$(snake "$name")
view=$(cat <<JSON
{
  "name": "$camel_name",
  "snakeName": "$snake_name",
  "type": "$T"
}
JSON
)

if ! ensure_deps; then
  exit $?
fi

template_file=$TEMPLATE_DIR/$template.h.mustache
if [ -f "$template_file" ]; then
  output_header_file_name=${snake_name}_$template.h
  echo "generating template $template for type $T with type name $camel_name into file: $output_header_file_name"
  output_header=$OUTPUT_DIR/$output_header_file_name
  printf "$GENERATED_CODE_WARN" > $output_header
  echo "$view" | mustache - "$template_file" >> $output_header

  #if [ ! -f $INCLUDE_HEADER_FILE ]; then
  #  printf "$GENERATED_CODE_WARN" > $INCLUDE_HEADER_FILE
  #  printf "#pragma once\n\n" >> $INCLUDE_HEADER_FILE
  #fi

  #if ! egrep -q "$output_header_file_name" $INCLUDE_HEADER_FILE; then
  #  echo "#include \"$output_header_file_name\"" >> $INCLUDE_HEADER_FILE
  #fi
else
  echo "Missing template file for \"$template\""
  echo "  available templates are:"
  for template in $TEMPLATE_DIR/*; do
    template_name=$(echo "$template" | awk -F'/' '{ print $NF }' | awk -F'.' '{ print $1 }')
    declarations=$(egrep -I class $template  | $(get_sed) -E "s/^class ([^[:space:]]+).*/\1/g" | tr "\n" ",")
    echo "  - \"$template_name\" generates: $declarations"
  done
  cat <<HELP
To use a template with this generator:
$ generate <template> <name> <c++ type>
HELP
fi

